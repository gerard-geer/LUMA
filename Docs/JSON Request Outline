********************************************************************************
This is a list of types of JSON requests and responses as well as examples
of each.
Most of these describe features that aren't yet implemented in the application.

So far we've got base functionality:
	-Querying for a set of lights
	-Getting the state of a light
	-Updating the state of a light.

Note: 	". . ." is used to denote a structure with multiple elements.
********************************************************************************

EXAMPLE QUERY:
{
	"uuid": "<example UUID>",
	"query": "<example query>"
}
EXAMPLE RESPONSE:
{
	"lights": [
		{
			"id": "<example light id number>",
			"name": "<example light name>",
			"client": "<example client name>"
		}
		. . .
	]
}

EXAMPLE STATE REQUEST
{
	"id": "<example light ID number>",
	"uuid": "<example UUID>"
}
EXAMPLE RESPONSE
{
	"success": <True | False>,
	"message": "<possible message>",
	"id": "<example light id number>",
	"name": "<example light name>",
	"client": "<example client name>",
	"r_t": [<red channel timings>],
	"r_v": [<red channel values>],
	"g_t": [<green channel timings>],
	"g_v": [<green channel values>],
	"b_t": [<blue channel timings>],
	"b_v": [<blue channel values>],
}

EXAMPLE LIGHTING UPDATE:
{
	"uuid": "<example UUID>",
	"lights": [
		{
			"id": "<example light id number>"
			"name": "<example light name>",
			"client": "<example client name>",
			"r_t": [<red channel timings>],
			"r_v": [<red channel values>],
			"g_t": [<green channel timings>],
			"g_v": [<green channel values>],
			"b_t": [<blue channel timings>],
			"b_v": [<blue channel values>]
		}
		. . .
	]
}
EXAMPLE RESPONSE:
{
	"lights": [
		{
			"success": <True | False>,
			"message": "<update message>",
			"name": "<example light name>",
			"client": "<example client name>",
			"r_t": [<red channel timings>],
			"r_v": [<red channel values>],
			"g_t": [<green channel timings>],
			"g_v": [<green channel values>],
			"b_t": [<blue channel timings>],
			"b_v": [<blue channel values>]
		}
		. . .
	]
	"success": <True | False>,
	"message": <example message pertaining to all lights in the request.>
}

EXAMPLE LIGHT INFO UPDATE:
{
	"id": <light id (IMMUTABLE)>,
	"name":	<None | "<New light name>">,
	"client":	<None | "<New client name>">,
	"permitted": <None | [ new uuid list ] >
}
EXAMPLE RESPONSE:
{
	"id": "<light id>",
	"success": <True | False>,
	"message": <None | "<Example message>">,
	"name":	{
		"success": <True | False>,
		"message": <None | "<Example message>">
		},
	"client":	{
		"success": <True | False>,
		"message": <None | "<Example message>">
		},
	"permitted":	{
		"success": <True | False>,
		"message": <None | "<Example message>">
		}
	}
}

EXAMPLE CLIENT LIGHT INFO UPDATE (Type: "update"):
{
	"name": "<example light name>",
	"id": "<example light id>"
}
EXAMPLE RESPONSE:
{
	"success":<True | False>,
	"message": <None | "<Example message>">
}

EXAMPLE CLIENT INFO UPDATE:
{
	"name": "<client name (IMMUTABLE)>",
	"address": "<new client address>"
}
EXAMPLE RESPONSE:
{
	"success": <True | False>,
	"message": <None | "<Example message>">
}

EXAMPLE LIGHT ADD:
{
	"name": "<example light name>",
	"client": "<example client name>",
	"address": "<example client IP>",
	"permitted": [
		"<example UUID>",
		. . .
	],
	"exists": <Bool whether or not the light already exists on a client.>
	"id": <Key needs to exist, but is only used as the existing ID
		   when adding existing lights to the server.>
	"r_c": <red channel pin number>,
	"g_c": <green channel pin number>,
	"b_c": <blue channel pin number>
}
EXAMPLE RESPONSE:
{
	"success":<True | False>,
	"message": <"<new id> | "<Example message>">
}

EXAMPLE CLIENT LIGHT ADD (Type: "add"):
{
	"name": "<example light name>",
	"id": "<example light id>",
	"r_c": <red channel pin number>,
	"g_c": <green channel pin number>,
	"b_c": <blue channel pin number>
}
EXAMPLE RESPONSE:
{
	"type": "<success|error>",
	"data": None,
	"message": "<example client response>"
}

EXAMPLE CLIENT ADD:
{
	"name": "<example client name>",
	"address": "<example client IP address>"
}
EXAMPLE RESPONSE:
{
	"success":<True | False>,
	"message": <None | "<Example message>">
}

EXAMPLE LIGHT REMOVE:
{
	"id": "<example light id>"
}
EXAMPLE RESPONSE:
{
	"success":<True | False>,
	"message": <None | "<Example message>">
}

EXAMPLE CLIENT LIGHT DELETE (Type: "DELETE"):
{
	id:	"<light id>"
}
EXAMPLE RESPONSE:
{
	"success":<True | False>,
	"message": <None | "<Example message>">
}

EXAMPLE STATE BACKUP:
{
	<No JSON is parsed server side.>
}
EXAMPLE RESPONSE:
{
	"success":<True | False>,
	"message": <None | "<Example message>">
}

EXAMPLE ADMIN LIGHT LISTING REQUEST
{
	<No JSON is parsed server side.>
}
EXAMPLE RESPONSE
{
	. . ., 
	"<light ID>": ["<light name>", "<light host client>"],
	. . .
}

EXAMPLE ADMIN CLIENT LISTING REQUEST
{
	<No JSON is parsed server side.>
}
EXAMPLE RESPONSE
{
	. . .,
	"<client name>": "<client address>",
	. . .
}

EXAMPLE ADVANCED CLIENT INFO
{
	<No JSON is parsed server side.>
}
EXAMPLE RESPONSE
{
	. . ., 
	"<light ID>": {
		"name": "<light name>",
		"pins": {..."<pin title>":<pin number>...}, // Future proofing for non RGB setups.
		"current time": <current time>
		},
	. . .
}

EXAMPLE S->C CLIENT INFO(Type: "INFO"):
{
	<No JSON is parsed server side.>
}
EXAMPLE RESPONSE
{
	. . ., 
	"<light ID>": {
		"name": "<light name>",
		"pins": {..."<pin title>":<pin number>...}, // Future proofing for non RGB setups.
		"time": <current time>
		},
	. . .
}